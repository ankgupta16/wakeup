package edu.umich.gopalkri.wakeup.data;

import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.ho.yaml.Yaml;

import android.content.Context;

public class Alarms
{
    public static final String ALARMS_FILE = "AlarmsFile.yaml";

    public Alarms(Context ctx)
    {
        this.ctx = ctx;
        try
        {
            InputStream is = ctx.openFileInput(ALARMS_FILE);
            alarmsContainer = (AlarmsContainer) Yaml.load(is);
        }
        catch (FileNotFoundException e)
        {
            // If file does not exist, no problem. It will get created when the first alarm is
            // created.
            alarmsContainer = new AlarmsContainer();
        }
    }

    public Alarm getAlarm(String name)
    {
        return alarmsContainer.getAlarm(name);
    }

    public void addAlarm(Alarm alarm) throws AlarmAlreadyExistsException, FileNotFoundException
    {
        alarmsContainer.addAlarm(alarm);
        Yaml.dump(alarmsContainer, ctx.openFileOutput(ALARMS_FILE, Context.MODE_PRIVATE));
    }

    public String[] getAllAlarmNames()
    {
        Set<String> keySet = alarmsContainer.getAlarms().keySet();
        int numAlarms = keySet.size();
        if (numAlarms <= 0)
        {
            return null;
        }
        String[] ret = new String[numAlarms];
        ret = keySet.toArray(ret);
        return ret;
    }

    private Context ctx;

    private AlarmsContainer alarmsContainer;

    private class AlarmsContainer implements java.io.Serializable
    {
        /**
         * Autogenerated.
         */
        private static final long serialVersionUID = -771998816315269294L;

        public AlarmsContainer()
        {}

        public Alarm getAlarm(String name)
        {
            if (alarms.containsKey(name))
            {
                return alarms.get(name);
            }
            return null;
        }

        public void addAlarm(Alarm alarm) throws AlarmAlreadyExistsException
        {
            if (alarms.containsKey(alarm.getName()))
            {
                throw new AlarmAlreadyExistsException();
            }
            alarms.put(alarm.getName(), alarm);
        }

        public Map<String, Alarm> getAlarms()
        {
            return alarms;
        }

        public void setAlarms(Map<String, Alarm> alarms)
        {
            this.alarms = alarms;
        }

        private Map<String, Alarm> alarms = new HashMap<String, Alarm>();
    }
}
